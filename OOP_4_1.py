# TODO: описать базовый класс
class human:

    name = None     # Имя (str)
    surname = None  # Фамилия (str)
    age = None      # Возраст (int)

    # Конструктор
    def __init__(self, surname: str, name: str, age: int):
        """
        Создание объекта класса "human":
        :param name: Имя человека (str)
        :param surname: Фамилия человека (str)
        :param age: Возраст человека в годах (int)
        """

        # Если введенная строка имеет символы, не являющиеся буквами, выдается ошибка значения
        if not (name.isalpha()): raise ValueError("Имя может содержать только буквы")

        # Если введенная строка начинается не с заглавной буквы, выдается ошибка значения
        if name[0].islower(): raise ValueError("Имя должно начинаться с большой буквы")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.name = name



        # Если введенная строка имеет символы, не являющиеся буквами, выдается ошибка значения
        if not (surname.isalpha()): raise ValueError("Фамилия может содержать только буквы")

        # Если введенная строка начинается не с заглавной буквы, выдается ошибка значения
        if surname[0].islower(): raise ValueError("Фамилия должна начинаться с большой буквы")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.surname = surname


        # Если введенное значение отрицательно, выдется ошибка значения
        if age < 0: raise ValueError("Возраст не может быть отрицательным")

        # Если введенное значение больше 150, выдается ошибка значения
        if age > 150: raise ValueError("Люди столько не живут")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.age = age

    # Магический метод __str__
    def __str__(self):
        """
        Метод выводит в консоль полную информацию об объекте
        """

        print(f"Имя: {self.name}, Фамилия: {self.surname}, возраст: {self.age} лет")

    # Магический метод __repr__
    def __repr__(self):
        """
        Метод возвращает строку валидного кода создания данного объекта класса
        """

        return f"human({self.surname!r}, {self.name!r}, {self.age!r})"

    def print(self):
        """
        Более удобный доступ полбзователю к информации внутри
        """
        self.__str__()

# TODO: описать дочерний класс

class student(human):

    number_of_debts = 0

    def __init__(self, surname: str, name: str, age: int, number_of_debts: int = 0):
        """
        Создание объекта класса "student":
        :param number_of_debts: Количество долгов у студента (int)

        """

        # Вызов конструктора родтельского класса
        super().__init__(surname, name, age)

        # Если введенное значение отрицательно, выдется ошибка значения
        if number_of_debts < 0: raise ValueError("Количество долгов не может быть отрицательным")

        # Если введенное значение больше 15, выдается ошибка значения
        if number_of_debts > 15: raise ValueError("Студенты с 15+ долгами перестают быть студентами")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.number_of_debts = number_of_debts


    # Магический метод __str__
    def __str__(self):
        """
        Метод выводит в консоль полную информацию об объекте
        Выходная строка формируется путем канкотенации строки, получаемой при выполнении
        одноименного метода родительского класса и дополнительной строки, содержащей
        информацию о количестве долгов студента
        """

        print(super.__str__() + f", Количество долгов: {self.number_of_debts}")


    # Магический метод __repr__
    def __repr__(self):
        """
        Метод возвращает строку валидного кода создания данного объекта класса
        Возвращаемая строка формируется путем канкотенации строки, получаемой при выполнении
        одноименного метода родительского класса и дополнительной строки, содержащей
        информацию о количестве долгов студента
        """
        return super.__repr__() + f", {self.number_of_debts!r}"



class professor(human):

    number_of_student_expelled = 0

    def __init__(self, surname: str, name: str, age: int, number_of_student_expelled = 0):
        """
        Создание объекта класса "professor":
        :param number_of_student_expelled: Количество отчисленных студентов (int)
        """

        # Вызов конструктора родтельского класса
        super().__init__(surname, name, age)

        # Если введенное значение отрицательно, выдется ошибка значения
        if number_of_student_expelled < 0:
            raise ValueError("Количество отчисленных студентов не может быть отрицательным")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.number_of_student_expelled = number_of_student_expelled

        # Магический метод __str__
    def __str__(self):
        """
        Метод выводит в консоль полную информацию об объекте
        Выходная строка формируется путем канкотенации строки, получаемой при выполнении
        одноименного метода родительского класса и дополнительной строки, содержащей
        информацию о количестве отчисленных преподавателем студентов

        """

        print(super.__str__() + f", Количество отчисленных студентов: {self.number_of_student_expelled}")


        # Магический метод __repr__
    def __repr__(self):
        """
        Метод возвращает строку валидного кода создания данного объекта класса
        Возвращаемая строка формируется путем канкотенации строки, получаемой при выполнении
        одноименного метода родительского класса и дополнительной строки, содержащей
        информацию о количестве отчисленных преподавателем студентов
        """

        return super.__repr__() + f", {self.number_of_student_expelled !r}"

    def print(self):
        """
        К преподавателям надо относиться с уважением
        """
        print("Уважаемый ", end="")
        self.__str__()

